{"ast":null,"code":"import { MongoClient } from 'mongodb';\n\nasync function handler(req, res) {\n  if (req.method === 'POST') {\n    const {\n      email,\n      name,\n      message\n    } = req.body;\n\n    if (!email || !email.includes('@') || !name || name.trim() === '' || !message || message.trim() === '') {\n      res.status(422).json({\n        message: 'Invalid input.'\n      });\n      return;\n    }\n\n    const newMessage = {\n      email,\n      name,\n      message\n    };\n    let client; // const connectionString = `mongodb+srv://${process.env.mongodb_username}:${process.env.mongodb_password}@${process.env.mongodb_clustername}.ntrwp.mongodb.net/${process.env.mongodb_database}?retryWrites=true&w=majority`;\n\n    const connectionString = `mongodb+srv://MdAzhar:0JGfPI2Xa2q6wHu1@nextblog.3esre.mongodb.net/newsletter?retryWrites=true&w=majority`;\n\n    try {\n      client = await MongoClient.connect(connectionString);\n    } catch (error) {\n      res.status(500).json({\n        message: 'Could not connect to database.'\n      });\n      return;\n    }\n\n    const db = client.db();\n\n    try {\n      const result = await db.collection('messages').insertOne(newMessage);\n      newMessage.id = result.insertedId;\n    } catch (error) {\n      client.close();\n      res.status(500).json({\n        message: 'Storing message failed!'\n      });\n      return;\n    }\n\n    client.close();\n    res.status(201).json({\n      message: 'Successfully stored message!',\n      message: newMessage\n    });\n  }\n}\n\nexport default handler;","map":{"version":3,"sources":["/Users/dhana/Desktop/Codem/Tasks/NextJS_Tasks/NextJs_Blog/pages/api/contact.js"],"names":["MongoClient","handler","req","res","method","email","name","message","body","includes","trim","status","json","newMessage","client","connectionString","connect","error","db","result","collection","insertOne","id","insertedId","close"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;;AAEA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/B,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAA2BL,GAAG,CAACM,IAArC;;AAEA,QACE,CAACH,KAAD,IACA,CAACA,KAAK,CAACI,QAAN,CAAe,GAAf,CADD,IAEA,CAACH,IAFD,IAGAA,IAAI,CAACI,IAAL,OAAgB,EAHhB,IAIA,CAACH,OAJD,IAKAA,OAAO,CAACG,IAAR,OAAmB,EANrB,EAOE;AACAP,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEL,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACD;;AAED,UAAMM,UAAU,GAAG;AACjBR,MAAAA,KADiB;AAEjBC,MAAAA,IAFiB;AAGjBC,MAAAA;AAHiB,KAAnB;AAMA,QAAIO,MAAJ,CArByB,CAuBzB;;AACA,UAAMC,gBAAgB,GAAI,0GAA1B;;AAEA,QAAI;AACFD,MAAAA,MAAM,GAAG,MAAMd,WAAW,CAACgB,OAAZ,CAAoBD,gBAApB,CAAf;AACD,KAFD,CAEE,OAAOE,KAAP,EAAc;AACdd,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEL,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACD;;AAED,UAAMW,EAAE,GAAGJ,MAAM,CAACI,EAAP,EAAX;;AAEA,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,UAAd,EAA0BC,SAA1B,CAAoCR,UAApC,CAArB;AACAA,MAAAA,UAAU,CAACS,EAAX,GAAgBH,MAAM,CAACI,UAAvB;AACD,KAHD,CAGE,OAAON,KAAP,EAAc;AACdH,MAAAA,MAAM,CAACU,KAAP;AACArB,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEL,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACD;;AAEDO,IAAAA,MAAM,CAACU,KAAP;AAEArB,IAAAA,GAAG,CACAQ,MADH,CACU,GADV,EAEGC,IAFH,CAEQ;AAAEL,MAAAA,OAAO,EAAE,8BAAX;AAA2CA,MAAAA,OAAO,EAAEM;AAApD,KAFR;AAGD;AACF;;AAED,eAAeZ,OAAf","sourcesContent":["import { MongoClient } from 'mongodb';\n\nasync function handler(req, res) {\n  if (req.method === 'POST') {\n    const { email, name, message } = req.body;\n\n    if (\n      !email ||\n      !email.includes('@') ||\n      !name ||\n      name.trim() === '' ||\n      !message ||\n      message.trim() === ''\n    ) {\n      res.status(422).json({ message: 'Invalid input.' });\n      return;\n    }\n\n    const newMessage = {\n      email,\n      name,\n      message,\n    };\n\n    let client;\n\n    // const connectionString = `mongodb+srv://${process.env.mongodb_username}:${process.env.mongodb_password}@${process.env.mongodb_clustername}.ntrwp.mongodb.net/${process.env.mongodb_database}?retryWrites=true&w=majority`;\n    const connectionString = `mongodb+srv://MdAzhar:0JGfPI2Xa2q6wHu1@nextblog.3esre.mongodb.net/newsletter?retryWrites=true&w=majority`\n\n    try {\n      client = await MongoClient.connect(connectionString);\n    } catch (error) {\n      res.status(500).json({ message: 'Could not connect to database.' });\n      return;\n    }\n\n    const db = client.db();\n\n    try {\n      const result = await db.collection('messages').insertOne(newMessage);\n      newMessage.id = result.insertedId;\n    } catch (error) {\n      client.close();\n      res.status(500).json({ message: 'Storing message failed!' });\n      return;\n    }\n\n    client.close();\n\n    res\n      .status(201)\n      .json({ message: 'Successfully stored message!', message: newMessage });\n  }\n}\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}